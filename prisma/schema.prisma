// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Department {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  Student Student[]

  coordinatorId String?       @db.ObjectId
  Coordinator   Coordinator[]
}

model Booklet {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  bookletDepartments BookletDepartments[]
  imageUrl           String?
  pdfUrl             String?
}

model Activity {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber     String
  title               String
  description         String
  activityDepartments ActivityDepartments[]
  date                DateTime
  link                String
  imageUrl            String?
}

model Drive {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber String
  title           String

  industryType     String
  ctc              String
  about            String
  bond             String
  role             String
  location         String
  description      String
  eligibility      String
  link             String
  rounds           Round[]
  imageUrl         String?
  driveDate        DateTime
  lastDriveDate    DateTime
  downloadlink     String?
  driveDepartments DriveDepartments[]
}

model Round {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  drive   Drive  @relation(fields: [driveId], references: [id], onDelete: Cascade)
  driveId String @db.ObjectId
}

model DriveDepartments {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  drive   Drive?  @relation(fields: [driveId], references: [id], onDelete: Cascade)
  driveId String? @db.ObjectId
}

model ActivityDepartments {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  Activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String?   @db.ObjectId
}

model BookletDepartments {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  Booklet   Booklet? @relation(fields: [bookletId], references: [id], onDelete: Cascade)
  bookletId String?  @db.ObjectId
}

enum UserRole {
  ADMIN
  COORDINATOR
  STUDENT
  USER
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  name                String
  password            String
  pfp                 String               @default("/logo.jpg")
  role                UserRole             @default(USER)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Student             Student[]
  Coordinator         Coordinator[]
  Admin               Admin[]
  CoordinatorApproval CoordinatorApproval?
}

model Student {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String             @unique @db.ObjectId
  isProfileComplete Boolean
  PRN               String
  department        Department         @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId      String             @db.ObjectId
  dob               DateTime
  gender            String
  phone             String
  address           String
  language          String[]
  passOutYear       String
  education         Education[]
  technicalSkill    TechnicalSkill[]
  project           Project[]
  cgpa              String
  otherInterests    String[]
  about             String
  githubLink        String
  linkedIn          String
  liveBack          String?            @default("0")
  deadBack          String?            @default("0")
  placed            Boolean            @default(false)
  studentDocuments  StudentDocuments[]
}

model Education {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  address   String
  marks     String
  institute String
  year      String

  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?  @db.ObjectId
}

model TechnicalSkill {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  domain String
  name   String[]

  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?  @db.ObjectId
}

model StudentDocuments {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  link  String

  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?  @db.ObjectId
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         String
  description  String
  technologies String[]
  role         String
  githubLink   String

  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?  @db.ObjectId
}

model Coordinator {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String      @unique @db.ObjectId
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?     @db.ObjectId

  phone             String
  isProfileComplete Boolean
}

model Admin {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  isProfileComplete Boolean @default(true)
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model CoordinatorApproval {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @unique @db.ObjectId
  status    ApprovalStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}
